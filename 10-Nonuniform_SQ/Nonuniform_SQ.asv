%% Clear 
close all; clear all; clc; 
%% Generate Poisson Distribution
len = 100;       % length of poisson function
lambda = len/2;   % mean of the distribution
n = 1:len;        % Index for poisson distribution
pos = poisspdf(n, lambda);   % generate Poisson distribution
samples = randsample(n, 10*len, true, pos); %samples due to poisson distribution
figure;
plot(n,pos);
figure;
plot(samples);
%% Calculate Decision boundaries and Reconstruction levels
M  = 100 ;  % number of levels
Nm_bon = M - 2; % number of decision boundaries
Delta = (max(samples) - min(samples)) / Nm_bon;  % Step size
DB = min(samples):Delta:max(samples);  % Initialize Decision boundaries as uniform destribution
y = zeros(1,M);
y(1) = min(samples);
y(M) = max(samples);
n= zeros(1,M);
itr=100;   %% Number of iterations
MSQE =zeros(1,itr);
for u=1:itr
    for i = 2:M-1
        sum =0;
        nu =0;
        for j = 1:len
            if(samples(j)>DB(i-1) && samples(j) <= DB(i) )
                nu = nu +1;
                sum = samples(j) + sum;
            end
        end
        if(nu==0)
            y(i) = DB(i-1);
        else
            y(i) = sum /nu;
        end
        n(i)=nu;
    end
    for i = 1:Nm_bon
        DB(i) = ( y(i) + y(i+1) ) / 2;
    end


    [a, quan_samples]= quantiz(samples,DB,y);

    for i = 1:length(samples)    
        MSQE(u) = abs(quan_samples(i) -samples(i)) + MSQE(u);
    end
    MSQE(u) = (MSQE(u)/length(samples))^2;


end
figure;
plot(MSQE);
xlabel('index');
ylabel('MSQE values');
title('Mean Square Quantization Error');
figure;
subplot(2,1,1);
plot(samples);
xlabel('index');
ylabel('MSQE values');
title('Mean Square Quantization Error');
subplot(2,1,2);
plot(quan_samples);
xlabel('index');
ylabel('Quantized values');
title('Quantized Values');
%%
% Define the Poisson distribution
lambda = 3;

% Generate 1000 random samples from the Poisson distribution
num_samples = 1000;
poisson_samples = poissrnd(lambda, 1, num_samples);

% Define the number of bits for quantization
n = 3;

% Define the quantization table using a logarithmic mapping function
Q = logspace(0, log10(max(poisson_samples)), 2^n);

% Quantize the Poisson samples using the quantization table
quantized_samples = zeros(size(poisson_samples));
for i = 1:length(poisson_samples)
    [~, index] = min(abs(Q - poisson_samples(i)));
    quantized_samples(i) = Q(index);
end

% Compute the mean squared error between the original and quantized samples
mse = mean((poisson_samples - quantized_samples).^2);

% Display the MSE and a histogram of the original and quantized samples
fprintf('MSE: %.4f\n', mse);
figure;
subplot(2,1,1);
plot(poisson_samples);
title('Original Poisson samples');
xlabel('Sample value');
ylabel('Frequency');
subplot(2,1,2);
plot(quantized_samples);
title('Quantized Poisson samples');
xlabel('Quantized value');
ylabel('Frequency');







